"use strict";(self.webpackChunk_eightshift_docs=self.webpackChunk_eightshift_docs||[]).push([[7702],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return d}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i=r.createContext({}),u=function(e){var n=r.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=u(e.components);return r.createElement(i.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(t),d=a,f=p["".concat(i,".").concat(d)]||p[d]||m[d]||o;return t?r.createElement(f,s(s({ref:n},c),{},{components:t})):r.createElement(f,s({ref:n},c))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,s=new Array(o);s[0]=p;var l={};for(var i in n)hasOwnProperty.call(n,i)&&(l[i]=n[i]);l.originalType=e,l.mdxType="string"==typeof e?e:a,s[1]=l;for(var u=2;u<o;u++)s[u]=t[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},8091:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return i},default:function(){return d},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return m}});var r=t(7462),a=t(3366),o=(t(7294),t(3905)),s=["components"],l={id:"columns-user",title:"User"},i=void 0,u={unversionedId:"legacy/v4/guides/columns-user",id:"legacy/v4/guides/columns-user",title:"User",description:"docs-source",source:"@site/docs/legacy/v4/guides/columns-user.md",sourceDirName:"legacy/v4/guides",slug:"/legacy/v4/guides/columns-user",permalink:"/selfrenew.website/docs/legacy/v4/guides/columns-user",draft:!1,tags:[],version:"current",frontMatter:{id:"columns-user",title:"User"},sidebar:"docs",previous:{title:"Taxonomy",permalink:"/selfrenew.website/docs/legacy/v4/guides/columns-taxonomy"},next:{title:"Login",permalink:"/selfrenew.website/docs/legacy/v4/guides/login"}},c={},m=[{value:"Example:",id:"example",level:2}],p={toc:m};function d(e){var n=e.components,t=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/infinum/eightshift-libs/tree/v2.0.0/src/columns/class-base-user-columns.php"},(0,o.kt)("img",{parentName:"a",src:"https://img.shields.io/badge/source-eigthshift--libs-blue?style=for-the-badge&logo=php&labelColor=2a2a2a",alt:"docs-source"}))),(0,o.kt)("p",null,"User Column class is located in ",(0,o.kt)("inlineCode",{parentName:"p"},"Eightshift Libs"),". To extend it use ",(0,o.kt)("inlineCode",{parentName:"p"},"Eightshift_Libs\\Columns\\Base_User_Columns")," class."),(0,o.kt)("h2",{id:"example"},"Example:"),(0,o.kt)("p",null,"To create custom user column:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"make a new class ",(0,o.kt)("inlineCode",{parentName:"li"},"src/columns/class-example-user-column.php"),"."),(0,o.kt)("li",{parentName:"ol"},"implement all the methods provided in the example."),(0,o.kt)("li",{parentName:"ol"},"register the class inside the ",(0,o.kt)("inlineCode",{parentName:"li"},"class-main.php")," file."),(0,o.kt)("li",{parentName:"ol"},"dump autoload.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"<?php\n/**\n * Example_User_Column class file\n *\n * @since 1.1.0\n * @package Eightshift_Boilerplate\\Columns\n */\n\ndeclare( strict_types=1 );\n\nnamespace Eightshift_Boilerplate\\Columns;\n\n/**\n * Class Example_User_Column.\n */\nclass Example_User_Column extends Base_User_Columns {\n\n  /**\n   * Column name constant name.\n   *\n   * @var string\n   */\n  const COLUMN_NAME = 'example';\n\n  /**\n   * Add additional user columns to the columns array.\n   *\n   * @param array $columns The existing column names array with default user columns (title, author, date etc.).\n   *\n   * @return array         Modified column names array.\n   *\n   * @since 2.0.5\n   */\n  public function add_column_name( array $columns ) : array {\n    $columns[ static::COLUMN_NAME ] = esc_html__( 'Example', 'eightshift-boilerplate' );\n\n    return $columns;\n  }\n\n  /**\n   * Render the user column content in the custom user column\n   *\n   * @param string $output      Custom column output. Default empty.\n   * @param string $column_name Column name.\n   * @param int    $user_id     ID of the currently-listed user.\n   *\n   * @return string             Output based on the column name.\n   *\n   * @since 2.0.5\n   */\n  public function render_column_content( string $output, string $column_name, int $user_id ) : string {\n    if ( $column_name === static::COLUMN_NAME ) {\n      echo 'column value';\n    }\n  }\n\n  /**\n   * Make user columns sortable\n   *\n   * @param  array $columns Array of columns.\n   *\n   * @return array          Modified array of columns.\n   *\n   * @since 2.0.5\n   */\n  public function sort_added_columns( array $columns ) : array {\n    $columns[ static::COLUMN_NAME ] = static::COLUMN_NAME;\n\n    return $columns;\n  };\n}\n\n")))}d.isMDXComponent=!0}}]);